{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMsvLfm5dNoAs1lRFJHZ+09",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/LHeisler81/Data-Projects/blob/main/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 316
        },
        "id": "bhJZr4rcm6ap",
        "outputId": "be7b98e4-3e67-4ccd-8de5-b1bfed55d14a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-f9979811-fa01-4fca-a0ac-ed928fe51251\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-f9979811-fa01-4fca-a0ac-ed928fe51251\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving patient_wait_times_dataset.csv to patient_wait_times_dataset (2).csv\n",
            "   Patient_ID  Age  Gender Insurance_Type   Visit_Type Appointment_Time  \\\n",
            "0           1   56  Female       Medicare  New Patient          Morning   \n",
            "1           2   69    Male        Private    Follow-up        Afternoon   \n",
            "2           3   46    Male        Private  New Patient          Morning   \n",
            "3           4   32    Male       Medicare  New Patient          Morning   \n",
            "4           5   60    Male        Private    Emergency        Afternoon   \n",
            "\n",
            "   Wait_Time_Minutes  \n",
            "0               43.0  \n",
            "1               17.4  \n",
            "2               30.1  \n",
            "3               34.4  \n",
            "4               15.3  \n",
            "ANOVA result: F_onewayResult(statistic=np.float64(0.5323302139932138), pvalue=np.float64(0.6606226150030907))\n"
          ]
        }
      ],
      "source": [
        "# Import libraries\n",
        "import pandas as pd\n",
        "import scipy.stats as stats\n",
        "import statsmodels.api as sm\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Upload your dataset\n",
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Read CSV into pandas\n",
        "df = pd.read_csv(list(uploaded.keys())[0])\n",
        "\n",
        "# Quick peek at the data\n",
        "print(df.head())\n",
        "\n",
        "# Example: one-way ANOVA\n",
        "# Use 'Insurance_Type' as the categorical variable and 'Wait_Time_Minutes' as the numeric variable\n",
        "groups = df['Insurance_Type'].unique()\n",
        "anova_data = [df[df['Insurance_Type'] == g]['Wait_Time_Minutes'] for g in groups]\n",
        "\n",
        "# Remove empty groups before performing ANOVA\n",
        "anova_data = [group_data for group_data in anova_data if not group_data.empty]\n",
        "\n",
        "if anova_data:\n",
        "    anova = stats.f_oneway(*anova_data)\n",
        "    print(\"ANOVA result:\", anova)\n",
        "else:\n",
        "    print(\"No data available for ANOVA after grouping.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8ada7924"
      },
      "source": [
        "# Task\n",
        "Explain the error in the provided Python code for performing ANOVA and Tukey's HSD test, fix the error, and then perform the ANOVA and Tukey's HSD tests on the \"Wait_Time\" and \"Insurance_Type\" columns of the \"healthcare_data.csv\" dataset. Interpret the results of both tests and visualize the data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d86e6ade"
      },
      "source": [
        "## Interpret anova results\n",
        "\n",
        "### Subtask:\n",
        "Explain the meaning of the F-statistic and p-value from the ANOVA test and determine if there is a statistically significant difference in wait times based on insurance type.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7ebb39b3"
      },
      "source": [
        "**Reasoning**:\n",
        "Explain the meaning of the F-statistic and p-value from the ANOVA test and determine if there is a statistically significant difference in wait times based on insurance type.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d7749ba3",
        "outputId": "4fb44822-b9bc-4bad-9621-1111ba427d9b"
      },
      "source": [
        "# 1. Identify the F-statistic and p-value from the output of the ANOVA test.\n",
        "anova_statistic = anova.statistic\n",
        "anova_pvalue = anova.pvalue\n",
        "\n",
        "print(f\"F-statistic: {anova_statistic}\")\n",
        "print(f\"P-value: {anova_pvalue}\")\n",
        "\n",
        "# 2. Explain what the F-statistic represents in the context of ANOVA.\n",
        "print(\"\\nExplanation of F-statistic:\")\n",
        "print(\"The F-statistic is the ratio of the variance between the groups to the variance within the groups.\")\n",
        "print(\"A larger F-statistic suggests that the variation between the group means is greater than the variation within each group.\")\n",
        "\n",
        "# 3. Explain what the p-value represents in the context of ANOVA.\n",
        "print(\"\\nExplanation of P-value:\")\n",
        "print(\"The p-value is the probability of observing an F-statistic as extreme as, or more extreme than, the one calculated from the data, assuming the null hypothesis is true.\")\n",
        "print(\"The null hypothesis for ANOVA is that the means of all groups are equal.\")\n",
        "\n",
        "# 4. Based on the p-value and a significance level of 0.05, determine if there is a statistically significant difference in the mean wait times across different insurance types.\n",
        "alpha = 0.05\n",
        "print(f\"\\nSignificance level (alpha): {alpha}\")\n",
        "\n",
        "if anova_pvalue < alpha:\n",
        "    print(\"Since the p-value is less than the significance level (0.05), we reject the null hypothesis.\")\n",
        "    print(\"Conclusion: There is a statistically significant difference in the mean wait times across different insurance types.\")\n",
        "else:\n",
        "    print(\"Since the p-value is greater than or equal to the significance level (0.05), we fail to reject the null hypothesis.\")\n",
        "    print(\"Conclusion: There is no statistically significant difference in the mean wait times across different insurance types.\")"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "F-statistic: 0.5323302139932138\n",
            "P-value: 0.6606226150030907\n",
            "\n",
            "Explanation of F-statistic:\n",
            "The F-statistic is the ratio of the variance between the groups to the variance within the groups.\n",
            "A larger F-statistic suggests that the variation between the group means is greater than the variation within each group.\n",
            "\n",
            "Explanation of P-value:\n",
            "The p-value is the probability of observing an F-statistic as extreme as, or more extreme than, the one calculated from the data, assuming the null hypothesis is true.\n",
            "The null hypothesis for ANOVA is that the means of all groups are equal.\n",
            "\n",
            "Significance level (alpha): 0.05\n",
            "Since the p-value is greater than or equal to the significance level (0.05), we fail to reject the null hypothesis.\n",
            "Conclusion: There is no statistically significant difference in the mean wait times across different insurance types.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8466c50e"
      },
      "source": [
        "## Perform post-hoc tests\n",
        "\n",
        "### Subtask:\n",
        "If the ANOVA results are statistically significant, perform Tukey's HSD post-hoc test to identify which specific insurance types have significantly different mean wait times.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c873fa2e"
      },
      "source": [
        "**Reasoning**:\n",
        "Check if the ANOVA p-value is less than the significance level and perform Tukey's HSD test if it is.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8c2823e9",
        "outputId": "f3eb43ab-6081-43b8-af3e-43916279cda0"
      },
      "source": [
        "# 1. Check if the ANOVA p-value (`anova_pvalue`) is less than the significance level (`alpha`).\n",
        "# 2. If the condition in step 1 is true, import the `pairwise_tukeyhsd` function from `statsmodels.stats.multicomp`.\n",
        "# 3. Perform Tukey's HSD test using the `Wait_Time_Minutes` column as the data and the `Insurance_Type` column as the groups from the `df` DataFrame. Store the results in a variable.\n",
        "# 4. Print the results of the Tukey's HSD test.\n",
        "\n",
        "if anova_pvalue < alpha:\n",
        "    from statsmodels.stats.multicomp import pairwise_tukeyhsd\n",
        "    tukey_results = pairwise_tukeyhsd(endog=df['Wait_Time_Minutes'], groups=df['Insurance_Type'], alpha=alpha)\n",
        "    print(\"\\nTukey's HSD Test Results:\")\n",
        "    print(tukey_results)\n",
        "else:\n",
        "    print(\"\\nANOVA results are not statistically significant, skipping Tukey's HSD test.\")"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "ANOVA results are not statistically significant, skipping Tukey's HSD test.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c7a0abae"
      },
      "source": [
        "## Visualize the data\n",
        "\n",
        "### Subtask:\n",
        "Create visualizations (e.g., box plots) to show the distribution of wait times for each insurance type.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8a42db30"
      },
      "source": [
        "**Reasoning**:\n",
        "Create a box plot to visualize the distribution of wait times for each insurance type.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 479
        },
        "id": "0d08614c",
        "outputId": "955f135c-5e69-4a63-c899-618be09a289f"
      },
      "source": [
        "# Create a box plot\n",
        "plt.figure(figsize=(10, 6))  # Adjust figure size for better readability\n",
        "df.boxplot(column='Wait_Time_Minutes', by='Insurance_Type', grid=False)\n",
        "\n",
        "# Label the axes and add a title\n",
        "plt.xlabel('Insurance Type')\n",
        "plt.ylabel('Wait Time (Minutes)')\n",
        "plt.title('Distribution of Wait Times by Insurance Type')\n",
        "\n",
        "# Display the plot\n",
        "plt.suptitle('') # Suppress the default title added by boxplot\n",
        "plt.show()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkIAAAG9CAYAAAD5ixlRAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAT+BJREFUeJzt3XdcVfX/B/DXBeGy5CLIEJmBiqg4sBQXQw2VzEGluNC0rDS3lQ1X5shdOcoUtDTNmeYeYIIjRTHNbbhRXOwpfH5/+ON+vV7Ae5HLBc7r+XjwqPs54/O+91y4Lz/3c86RCSEEiIiIiCTIQN8FEBEREekLgxARERFJFoMQERERSRaDEBEREUkWgxARERFJFoMQERERSRaDEBEREUkWgxARERFJFoMQERERSRaDEGlt8uTJkMlk5dJXQEAAAgIClI+jo6Mhk8mwYcOGcul/4MCBcHNzK5e+Sis9PR1DhgyBg4MDZDIZRo0apdd6Co9RdHS0Tvu5du0aZDIZIiMjddpPWSqsec6cOfouhYj+H4OQxEVGRkImkyl/TExM4OjoiODgYHz33XdIS0srk37u3LmDyZMnIz4+vkz2V5Yqcm2amD59OiIjI/Hhhx/il19+Qf/+/Ytcz9vbG40bN1Zr37x5M2QyGfz9/dWWrVixAjKZDHv27HmpGtesWYMFCxa8cL3CkP2in2fDMakr/L0+ceKEvkupMgoDviY/VLlU03cBVDFMnToV7u7uyMvLw927dxEdHY1Ro0Zh3rx52Lp1K3x8fJTrfvnll/jss8+02v+dO3cwZcoUuLm5oUmTJhpv97IfwJooqbZly5ahoKBA5zW8jAMHDqBly5aYNGlSieu1adMGy5cvR0pKChQKhbI9NjYW1apVw/Hjx5GXlwcjIyOVZYaGhvDz89O4nnbt2iErKwvGxsbKtjVr1uDs2bMvHK3q2bMnPD09lY/T09Px4YcfokePHujZs6ey3d7eHq6ursjKylKpl0hX6tevj19++UWlbcKECbCwsMAXX3yhp6qoLDAIEQCgc+fOaN68ufLxhAkTcODAAbzxxht48803cf78eZiamgIAqlWrhmrVdPvWyczMhJmZmcqHqT5Uhg/ZpKQkeHt7v3C9Nm3aYNmyZTh8+DA6d+6sbI+NjcU777yDNWvWIC4uDi1btlQui4mJgY+PD6pXr65xPQYGBjAxMdHuSfw/Hx8fldD94MEDfPjhh/Dx8UG/fv3U1i9tP6Q/QghkZ2cr/55UFvb29mrvwZkzZ6JmzZpFvjep8uBXY1SsoKAgfPXVV7h+/Tp+/fVXZXtRc4T27t2LNm3awMrKChYWFqhXrx4+//xzAE+HlF999VUAwKBBg5TDx4VzOwICAtCwYUPExcWhXbt2MDMzU277/ByhQvn5+fj888/h4OAAc3NzvPnmm7h586bKOm5ubhg4cKDats/u80W1FTVHKCMjA2PHjoWzszPkcjnq1auHOXPmQAihsp5MJsPw4cOxZcsWNGzYEHK5HA0aNMCuXbuKfsGfk5SUhMGDB8Pe3h4mJiZo3LgxVq5cqVxeOFSfkJCA7du3K2u/du1akftr06YNgKfBp1B2djZOnjyJnj174pVXXlFZdv/+fVy6dEm53fXr1/HRRx+hXr16MDU1hY2NDd5++221/p6fIxQQEIDt27fj+vXryhrLYt5VUXOEBg4cCAsLC9y4cQNvvPEGLCwsULt2bSxatAgAcObMGQQFBcHc3Byurq5Ys2aN2n6Tk5MxatQo5fH19PTErFmz1EYG165dC19fX1SvXh2WlpZo1KgRFi5cqHH98+fPh6urK0xNTeHv74+zZ88ql0VEREAmk+HUqVNq202fPh2Ghoa4ffu2xn0B/3ttbt++je7du8PCwgK2trYYN24c8vPztXpuxc0TLPxK7tn3hJubG9544w3s3r0bzZs3h6mpKX788Ufl8wwKCoKdnR3kcjm8vb2xZMkStf0W7iMmJgavvfYaTExM8Morr2DVqlVq6yYnJ2P06NFwc3ODXC6Hk5MTBgwYgAcPHijXycnJwaRJk+Dp6Qm5XA5nZ2d88sknyMnJ0eo1fZYQAm5ubujWrZvasuzsbCgUCgwdOhTA/35H1q1b98K/YwBw7NgxdOrUCQqFAmZmZvD391f5XaWXwxEhKlH//v3x+eefY8+ePXjvvfeKXOfff//FG2+8AR8fH0ydOhVyuRxXrlxR/qLWr18fU6dOxcSJE/H++++jbdu2AIBWrVop9/Hw4UN07twZvXv3Rr9+/WBvb19iXd988w1kMhk+/fRTJCUlYcGCBejQoQPi4+O1+pemJrU9SwiBN998E1FRURg8eDCaNGmC3bt3Y/z48bh9+zbmz5+vsn5MTAw2bdqEjz76CNWrV8d3332H0NBQ3LhxAzY2NsXWlZWVhYCAAFy5cgXDhw+Hu7s71q9fj4EDByI5ORkjR45UDtWPHj0aTk5OGDt2LADA1ta2yH2+8sorcHR0RExMjLLt+PHjyM3NRatWrdCqVSvExsYq93P48GEA/wtQx48fx+HDh9G7d284OTnh2rVrWLJkCQICAnDu3DmYmZkV2e8XX3yBlJQU3Lp1S/n6WFhYFPvcX1Z+fj46d+6Mdu3a4dtvv8Xq1asxfPhwmJub44svvkDfvn3Rs2dPLF26FAMGDICfnx/c3d0BPB2J9Pf3x+3btzF06FC4uLjg8OHDmDBhAhITE5XznPbu3YuwsDC0b98es2bNAgCcP38esbGxGDly5AtrXLVqFdLS0jBs2DBkZ2dj4cKFCAoKwpkzZ2Bvb4+33noLw4YNw+rVq9G0aVOVbVevXo2AgADUrl27VK9NcHAwWrRogTlz5mDfvn2YO3cuPDw88OGHH5bJcyvKxYsXERYWhqFDh+K9995DvXr1AABLlixBgwYN8Oabb6JatWrYtm0bPvroIxQUFGDYsGEq+7hy5QreeustDB48GOHh4VixYgUGDhwIX19fNGjQAMDTr1Lbtm2L8+fP491330WzZs3w4MEDbN26Fbdu3ULNmjVRUFCAN998EzExMXj//fdRv359nDlzBvPnz8elS5ewZcuWUj1HmUyGfv364dtvv8WjR49gbW2tXLZt2zakpqaqjRxp8nfswIED6Ny5M3x9fTFp0iQYGBgoA+ShQ4fw2muvlapeeoYgSYuIiBAAxPHjx4tdR6FQiKZNmyofT5o0STz71pk/f74AIO7fv1/sPo4fPy4AiIiICLVl/v7+AoBYunRpkcv8/f2Vj6OiogQAUbt2bZGamqps//333wUAsXDhQmWbq6urCA8Pf+E+S6otPDxcuLq6Kh9v2bJFABDTpk1TWe+tt94SMplMXLlyRdkGQBgbG6u0nT59WgAQ33//vVpfz1qwYIEAIH799VdlW25urvDz8xMWFhYqz93V1VWEhISUuL9Cb7/9tjA1NRW5ublCCCFmzJgh3N3dhRBCLF68WNjZ2SnXHTdunAAgbt++LYQQIjMzU21/R44cEQDEqlWrlG2FxygqKkrZFhISovI6aur+/fsCgJg0aZLasoSEBLXjFh4eLgCI6dOnK9seP34sTE1NhUwmE2vXrlW2X7hwQW3fX3/9tTA3NxeXLl1S6euzzz4ThoaG4saNG0IIIUaOHCksLS3FkydPtHo+hTWbmpqKW7duKduPHTsmAIjRo0cr28LCwoSjo6PIz89Xtp08ebLY9+qzivq9Lnxtpk6dqrJu06ZNha+vr/KxJs/t+b8Bz/ebkJCgbHN1dRUAxK5du9TWL+o9FRwcLF555RWVtsJ9/PXXX8q2pKQkIZfLxdixY5VtEydOFADEpk2b1PZbUFAghBDil19+EQYGBuLQoUMqy5cuXSoAiNjY2GKetboGDRqo/C25ePGiACCWLFmist6bb74p3NzclDVo+nesoKBA1KlTRwQHByu3FeLp6+bu7i46duyoca1UPH41Ri9kYWFR4tljVlZWAIA//vij1BOL5XI5Bg0apPH6AwYMUJm38tZbb6FWrVrYsWNHqfrX1I4dO2BoaIgRI0aotI8dOxZCCOzcuVOlvUOHDvDw8FA+9vHxgaWlJf77778X9uPg4ICwsDBlm5GREUaMGIH09HQcPHiwVPW3adMGWVlZiIuLA/D0a7LC0a/WrVsjKSkJly9fVi5zd3eHo6MjAKiMtOXl5eHhw4fw9PSElZUVTp48Wap6dGXIkCHK/7eyskK9evVgbm6Od955R9ler149WFlZqRyL9evXo23btqhRowYePHig/OnQoQPy8/Px119/KfeZkZGBvXv3lqq+7t27q4zovPbaa2jRooXK+3fAgAG4c+cOoqKilG2rV6+GqakpQkNDS9UvAHzwwQcqj9u2bavyGrzscyuKu7s7goOD1dqffU+lpKTgwYMH8Pf3x3///YeUlBSVdb29vZUjtsDTkc969eqp1L5x40Y0btwYPXr0UOur8Ku89evXo379+vDy8lI5xkFBQQCg8nprq27dumjRogVWr16tbHv06BF27tyJvn37qn2d+KK/Y/Hx8bh8+TL69OmDhw8fKmvNyMhA+/bt8ddff1X4kzkqAwYheqH09PQSJ8v26tULrVu3xpAhQ2Bvb4/evXvj999/1+oXtHbt2lpNjK5Tp47KY5lMBk9Pz2Lnx5SV69evw9HRUe31qF+/vnL5s1xcXNT2UaNGDTx+/PiF/dSpUwcGBqq/osX1o6ln5wkJIXD48GG0bt0aANCwYUNYWloiNjYW2dnZiIuLU64PPP26buLEicq5MzVr1oStrS2Sk5PVPrT0ycTERO3rQYVCAScnJ7UPIoVCoXIsLl++jF27dsHW1lblp0OHDgCeztsCgI8++gh169ZF586d4eTkhHfffVfjuV+A+vsXePoh+uz7t2PHjqhVq5byQ7WgoAC//fYbunXrptXk9WcV9do8/3582edWlMKvHp8XGxuLDh06wNzcHFZWVrC1tVXOD3z+PaXJ79LVq1fRsGHDEmu5fPky/v33X7VjXLduXQD/O8alNWDAAMTGxip/R9evX4+8vLwiL2vxor9jhf8oCQ8PV6v3559/Rk5OToX63ausOEeISnTr1i2kpKSonNL8PFNTU/z111+IiorC9u3bsWvXLqxbtw5BQUHYs2cPDA0NX9iPLs4gKe56Hvn5+RrVVBaK60c8N7G6vDRu3BjVq1dHTEwMunTpgkePHilHhAwMDNCiRQvExMTAw8MDubm5KkHo448/RkREBEaNGgU/Pz8oFArIZDL07t27Qv2rtLjXXJNjUVBQgI4dO+KTTz4pct3CD0s7OzvEx8dj9+7d2LlzJ3bu3ImIiAgMGDBAZUL7yzA0NESfPn2wbNkyLF68GLGxsbhz585LnaGkyftek+dW0u9WUYr6/b569Srat28PLy8vzJs3D87OzjA2NsaOHTswf/58tfdUWf0uFRQUoFGjRpg3b16Ry52dnbXa3/N69+6N0aNHY/Xq1fj888/x66+/onnz5sp5UdrWCgCzZ88u9rIjupxvJxUMQlSiwutmFDWs/SwDAwO0b98e7du3x7x58zB9+nR88cUXiIqKQocOHcr8ImOF/1IqJITAlStXVE69rlGjBpKTk9W2vX79Ol555RXlY21qc3V1xb59+5CWlqbyr/ILFy4ol5cFV1dX/PPPPygoKFAZFXrZfgwNDdGyZUvExsYiJiZGeUZQoVatWmHdunXK4PtsENqwYQPCw8Mxd+5cZVt2dnaRr/HzKstF5jw8PJCenq4cASqJsbExunbtiq5du6KgoAAfffQRfvzxR3z11Vcl/sMBUH//AsClS5fUzqYbMGAA5s6di23btmHnzp2wtbV94e9iWXjRc6tRowaAp2doFX41Dmg3Urlt2zbk5ORg69atKqM9L/PVlIeHh8rZd8Wtc/r0abRv314n70tra2uEhIRg9erV6Nu3L2JjY4u9mOiL/o4Vfq1uaWmp0XuSSodfjVGxDhw4gK+//hru7u7o27dvses9evRIra3wXy+Fp6Oam5sDgEYfmpooPOum0IYNG5CYmKhyfRwPDw8cPXoUubm5yrY///xT7fRUbWrr0qUL8vPz8cMPP6i0z58/HzKZTKX/l9GlSxfcvXsX69atU7Y9efIE33//PSwsLIq8CrSm2rRpg/v37yMiIgItWrRQCVqtWrXCxYsX8ccff8DGxkb5VRzwNEQ9/6/v77//vthRgGeZm5tXiiH8d955B0eOHMHu3bvVliUnJ+PJkycAnp7l+CwDAwPlh5cmp2Bv2bJF5fT3v//+G8eOHVN7/xReV+nnn3/Gxo0b0bt3b51fw0uT51b4AV04Zwp4elkJbUbDCkd4nn1PpaSkICIionSFAwgNDcXp06exefNmtWWF/bzzzju4ffs2li1bprZOVlYWMjIySt1/of79++PcuXMYP348DA0N0bt37yLXe9HfMV9fX3h4eGDOnDlIT09X2/7+/fsvXStxRIj+386dO3HhwgU8efIE9+7dw4EDB7B37164urpi69atJV64burUqfjrr78QEhICV1dXJCUlYfHixXByclKOKHh4eMDKygpLly5F9erVYW5ujhYtWhQ7d+BFrK2t0aZNGwwaNAj37t3DggUL4OnpqXKK/5AhQ7BhwwZ06tQJ77zzDq5evYpff/1VZfKytrV17doVgYGB+OKLL3Dt2jU0btwYe/bswR9//IFRo0ap7bu03n//ffz4448YOHAg4uLi4Obmhg0bNij/dVnaOSLA/0Z5jhw5gsmTJ6ssa9myJWQyGY4ePYquXbuq/Iv5jTfewC+//AKFQgFvb28cOXIE+/btK/EyAIV8fX2xbt06jBkzBq+++iosLCzQtWvXUj8HXRk/fjy2bt2KN954Q3lqdkZGBs6cOYMNGzbg2rVrqFmzJoYMGYJHjx4hKCgITk5OuH79Or7//ns0adJEJTwWx9PTE23atMGHH36InJwcLFiwADY2NkV+JTdgwACMGzcOAMrlwn2aPLfXX38dLi4uGDx4sPLDfsWKFbC1tcWNGzc06uf1119XjjwNHToU6enpWLZsGezs7JCYmFiq2sePH48NGzbg7bffxrvvvgtfX188evQIW7duxdKlS9G4cWP0798fv//+Oz744ANERUWhdevWyM/Px4ULF/D7778rr3f0MkJCQmBjY4P169ejc+fOsLOzK3K9F/0dMzAwwM8//4zOnTujQYMGGDRo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g4ODQ7H7lcvlkMvluixdL8zMzEo1MmN8OwXy6HR4N2qChrUVOqiMiIio8tJbEGrfvj3OnDmj0jZo0CB4eXnh008/hbOzM4yMjLB//36EhoYCAC5evIgbN27Az89PHyUTERFRFaO3IFS9enU0bNhQpc3c3Bw2NjbK9sGDB2PMmDGwtraGpaUlPv74Y/j5+RU7UZqIiIhIG3o/a6wk8+fPh4GBAUJDQ5GTk4Pg4GAsXrxY32URERFRFVGhglB0dLTKYxMTEyxatAiLFi3ST0FERERUpen9gopERERE+sIgRERERJLFIERERESSxSBEREREksUgRERERJLFIERERESSxSBEREREksUgRERERJLFIERERESSxSBEREREksUgRERERJLFIERERESSxSBEREREksUgRERERJLFIERERESSxSBEREREksUgRERERJLFIERERESSxSBEREREksUgRERERJLFIERERESSxSBEREREksUgRERERJLFIERERESSxSBEREREksUgRERERJLFIERERESSxSBEREREksUgRERERJLFIERERESSVU2blZOTk7F582YcOnQI169fR2ZmJmxtbdG0aVMEBwejVatWuqqTiIiIqMxpNCJ0584dDBkyBLVq1cK0adOQlZWFJk2aoH379nByckJUVBQ6duwIb29vrFu3Ttc1ExEREZUJjUaEmjZtivDwcMTFxcHb27vIdbKysrBlyxYsWLAAN2/exLhx48q0UCIiIqKyplEQOnfuHGxsbEpcx9TUFGFhYQgLC8PDhw/LpDgiIiIiXdLoq7EXhaCXXZ+IiIhIH7Q+a2zlypXYvn278vEnn3wCKysrtGrVCtevXy/T4oiIiIh0SesgNH36dJiamgIAjhw5gkWLFuHbb79FzZo1MXr06DIvkIiIiEhXtDp9HgBu3rwJT09PAMCWLVsQGhqK999/H61bt0ZAQEBZ10dERESkM1qPCFlYWCgnQ+/ZswcdO3YEAJiYmCArK6tsqyMiIiLSIa1HhDp27IghQ4agadOmuHTpErp06QIA+Pfff+Hm5lbW9RERERHpjNYjQosWLYKfnx/u37+PjRs3Ks8Qi4uLQ1hYWJkXSERERKQrWo8IWVlZ4YcfflBrnzJlSpkURERERFReSnXT1UOHDqFfv35o1aoVbt++DQD45ZdfEBMTU6bFEREREemS1iNCGzduRP/+/dG3b1+cPHkSOTk5AICUlBRMnz4dO3bsKPMiiaqKhAcZyMh5Um79XUlKV/lveTGXV4N7TfNy7ZOIqDS0DkLTpk3D0qVLMWDAAKxdu1bZ3rp1a0ybNq1Mi6uK+EEoXQkPMhA4J1ovfY9aF1/ufUaNC+B7gIgqPK2D0MWLF9GuXTu1doVCgeTk5LKoqcriB6G0FQbgBb2awNPOolz6zM7Lx63HWXCqYQoTI8Ny6fNKUjpGrYsv18BPRFRaWgchBwcHXLlyRe1U+ZiYGLzyyitlVVeVxA9CAgBPOws0rK0ot/6au5VbV0RElY7WQei9997DyJEjsWLFCshkMty5cwdHjhzBuHHj8NVXX+mixiqHH4REREQVg9ZB6LPPPkNBQQHat2+PzMxMtGvXDnK5HOPGjcPHH3+sixqJiIiIdELrICSTyfDFF19g/PjxuHLlCtLT0+Ht7Q0Li/L5qoeIiKgy4skyFZPWQejdd9/FwoULUb16dXh7eyvbMzIy8PHHH2PFihVlWiAREVFlx5NlKi6tg9DKlSsxc+ZMVK9eXaU9KysLq1atYhAiIiJ6Dk+Wqbg0DkKpqakQQkAIgbS0NJiYmCiX5efnY8eOHbCzs9NJkURERFUBT5apeDQOQlZWVpDJZJDJZKhbt67acplMxvuNERERUaWicRCKioqCEAJBQUHYuHEjrK2tlcuMjY3h6uoKR0dHnRRJREREpAsaByF/f38AQEJCAlxcXCCTyXRWFBEREVF50Hqy9PXr13H9+vVilxd1+w0iIiKiikjrIBQQEKDW9uzoUH5+/ksVRERERFReDLTd4PHjxyo/SUlJ2LVrF1599VXs2bNHFzUSERER6YTWI0IKhfppfx07doSxsTHGjBmDuLi4MimMiIiISNe0HhEqjr29PS5evFhWuyMiIiLSOa1HhP755x+Vx0IIJCYmYubMmWjSpElZ1UVERESkc1oHoSZNmkAmk0EIodLesmVL3l6DiIiIKhWtg1BCQoLKYwMDA9ja2qrccoOIiIioMtA6CLm6uuqiDiIiIqJyp3UQAoD9+/dj//79SEpKQkFBgcoyfj1GRERElYXWZ41NmTIFr7/+Ovbv348HDx6oXVdIG0uWLIGPjw8sLS1haWkJPz8/7Ny5U7k8Ozsbw4YNg42NDSwsLBAaGop79+5pWzIRERFRkbQeEVq6dCkiIyPRv3//l+7cyckJM2fORJ06dSCEwMqVK9GtWzecOnUKDRo0wOjRo7F9+3asX78eCoUCw4cPR8+ePREbG/vSfRMRlbeEBxnIyHlSbv1dSUpX+W95MZdXg3tN83Ltk6i0tA5Cubm5aNWqVZl03rVrV5XH33zzDZYsWYKjR4/CyckJy5cvx5o1axAUFAQAiIiIQP369XH06FG0bNmyTGogIioPCQ8yEDgnWi99j1oXX+59Ro0LYBiiSkHrIDRkyBCsWbMGX331VZkWkp+fj/Xr1yMjIwN+fn6Ii4tDXl4eOnTooFzHy8sLLi4uOHLkSLFBKCcnBzk5OcrHqampZVonEVFpFI4ELejVBJ52FuXSZ3ZePm49zoJTDVOYGBmWS59XktIxal18uY58Eb0MrYNQdnY2fvrpJ+zbtw8+Pj4wMjJSWT5v3jyt9nfmzBn4+fkhOzsbFhYW2Lx5M7y9vREfHw9jY2NYWVmprG9vb4+7d+8Wu78ZM2ZgypQpWtVARFRePO0s0LC2+q2KdKW5W7l1RVQplerK0oVXkD579qzKsmfvQq+pevXqIT4+HikpKdiwYQPCw8Nx8OBBrfdTaMKECRgzZozycWpqKpydnUu9PyIiIqq6tA5CUVFRZVqAsbExPD09AQC+vr44fvw4Fi5ciF69eiE3NxfJyckqo0L37t2Dg4NDsfuTy+WQy+VlWiMRERFVTWV209WyUlBQgJycHPj6+sLIyAj79+9XLrt48SJu3LgBPz8/PVZIREREVYVGI0I9e/ZEZGQkLC0t0bNnzxLX3bRpk8adT5gwAZ07d4aLiwvS0tKwZs0aREdHY/fu3VAoFBg8eDDGjBkDa2trWFpa4uOPP4afnx/PGCMiIqIyoVEQUigUyvk/CkXZTfJLSkrCgAEDkJiYCIVCAR8fH+zevRsdO3YEAMyfPx8GBgYIDQ1FTk4OgoODsXjx4jLrn4iIiKRNoyAUERFR5P+/rOXLl5e43MTEBIsWLcKiRYvKrE8iIiKiQhVujhARERFRedH4rLHCqzu/yIEDB0pdDBEREVF50jgIRUdHw9XVFSEhIWoXUSQiIiKqjDQOQrNmzUJERATWr1+Pvn374t1330XDhg11WRsRERGRTmk8R2j8+PE4d+4ctmzZgrS0NLRu3RqvvfYali5dyvt5ERERUaWk9WRpPz8/LFu2DImJiRg2bBhWrFgBR0dHhiEiIiKqdEp91tjJkydx8OBBnD9/Hg0bNuS8ISIiIqp0tApCd+7cwfTp01G3bl289dZbsLa2xrFjx3D06FGYmprqqkYiIiIindB4snSXLl0QFRWF119/HbNnz0ZISAiqVdP6nq1EREREFYbGSWbXrl2oVasWbty4gSlTpmDKlClFrnfy5MkyK46IiIhIlzQOQpMmTdJlHURERETljkGIiIiIJIuTfMqZrFoqElIvwsDEQt+l6ExCajpk1Xg5BSIiqvg0CkKdOnXC5MmT0bJlyxLXS0tLw+LFi2FhYYFhw4aVSYFVjZHVMXz+93R9l6FzRlbtAXTRdxlEREQl0igIvf322wgNDYVCoUDXrl3RvHlzODo6wsTEBI8fP8a5c+cQExODHTt2ICQkBLNnz9Z13ZVWXnILzA3pAw+7qjsidDUpHSNWX9V3GURERC+kURAaPHgw+vXrh/Xr12PdunX46aefkJKSAgCQyWTw9vZGcHAwjh8/jvr16+u04MpOPLGEu2U9eNso9F2KzhRkp0A8ua/vMoiIiF5I4zlCcrkc/fr1Q79+/QAAKSkpyMrKgo2NDa8qTURERJVSqSdLKxQKKBRVd1SDiIiIqr5S32uMiIiIqLJjECIiIiLJYhAiIiIiyeIFFYnKES+oSURUsZQqCCUnJ2PDhg24evUqxo8fD2tra5w8eRL29vaoXbt2WddIVGXwgppERBWL1kHon3/+QYcOHaBQKHDt2jW89957sLa2xqZNm3Djxg2sWrVKF3USVQm8oCYRUcWidRAaM2YMBg4ciG+//RbVq1dXtnfp0gV9+vQp0+KIqhpeUJOIqGLRerL08ePHMXToULX22rVr4+7du2VSFBEREVF50DoIyeVypKaqT4S8dOkSbG1ty6QoIiIiovKgdRB68803MXXqVOTl5QF4eq+xGzdu4NNPP0VoaGiZF0hERESkK1oHoblz5yI9PR12dnbIysqCv78/PD09Ub16dXzzzTe6qJGIiIhIJ7SeLK1QKLB3717ExMTgn3/+QXp6Opo1a4YOHTrooj4iIiIinSn1BRXbtGmDNm3alGUtREREROWqVEHo+PHjiIqKQlJSEgoKClSWzZs3r0wKIyKqanhlcaKKR+sgNH36dHz55ZeoV68e7O3tIZPJlMue/X8iIlLFK4sTVTxaB6GFCxdixYoVGDhwoA7KISKqunhlcaKKR+sgZGBggNatW+uiFiKiKo1XFieqeLQ+fX706NFYtGiRLmohIiIiKldajwiNGzcOISEh8PDwgLe3N4yMjFSWb9q0qcyKIyIiItIlrYPQiBEjEBUVhcDAQNjY2HCCNBEREVVaWgehlStXYuPGjQgJCdFFPURERETlRus5QtbW1vDw8NBFLURERETlSusgNHnyZEyaNAmZmZm6qIeIiIio3Gj91dh3332Hq1evwt7eHm5ubmqTpU+ePFlmxRERERHpktZBqHv37joog4iIiKj8aR2EJk2apIs6iIiIiMqd1nOEiIiIiKoKjUaErK2tcenSJdSsWRM1atQo8dpBjx49KrPiiIiIiHRJoyA0f/58VK9eHQCwYMECXdZDRERUJcmqpSIh9SIMTKruTXcTUtMhq5aq7zK0olEQCg8PR1BQEDZt2oTw8HBd10RERFTlGFkdw+d/T9d3GTpnZNUeQBd9l6ExjSdLR0dHIzc3V5e1EBERVVl5yS0wN6QPPOyq7ojQ1aR0jFh9Vd9laEXrs8aIiIhIe+KJJdwt68HbRqHvUnSmIDsF4sl9fZehFa2C0Llz53D37t0S1/Hx8XmpgoiIiIjKi1ZBqH379hBCqLXLZDIIISCTyZCfn19mxRERERHpklZB6NixY7C1tdVVLURERETlSqsg5OLiAjs7O13VQkRERFSueGVpIiIikiyNg5C/vz+MjY11WQsRERFRudL4q7GoqChd1kFERERU7vjVGBEREUkWgxARERFJFoMQERERSZbWQWjq1KnIzMxUa8/KysLUqVPLpCgiIiKi8qB1EJoyZQrS09PV2jMzMzFlypQyKYqIiIioPGgdhApvpfG806dPw9raukyKIiIiIioPGp8+X6NGDchkMshkMtStW1clDOXn5yM9PR0ffPCBTookIiIi0gWNg9CCBQsghMC7776LKVOmQKFQKJcZGxvDzc0Nfn5+OimSiIiISBc0DkLh4eEAAHd3d7Rq1QpGRkYv3fmMGTOwadMmXLhwAaampmjVqhVmzZqFevXqKdfJzs7G2LFjsXbtWuTk5CA4OBiLFy+Gvb39S/dPRERE0qbRHKHU1FTl/zdt2hRZWVlITU0t8kcbBw8exLBhw3D06FHs3bsXeXl5eP3115GRkaFcZ/To0di2bRvWr1+PgwcP4s6dO+jZs6dW/RAREREVRaMRoRo1aiAxMRF2dnawsrIqcrJ04STq/Px8jTvftWuXyuPIyEjY2dkhLi4O7dq1Q0pKCpYvX441a9YgKCgIABAREYH69evj6NGjaNmypcZ9ERERET1PoyB04MAB5RlhurznWEpKCgAo+4qLi0NeXh46dOigXMfLywsuLi44cuRIkUEoJycHOTk5ysfajlIRERGRdGgUhPz9/Yv8/7JUUFCAUaNGoXXr1mjYsCEA4O7duzA2NoaVlZXKuvb29rh7926R+5kxYwavZ0REREQa0Xiy9PMyMzNx48YN5ObmqrT7+PiUan/Dhg3D2bNnERMTU9qSAAATJkzAmDFjlI9TU1Ph7Oz8UvskIiKiqknrIHT//n0MGjQIO3fuLHK5NnOECg0fPhx//vkn/vrrLzg5OSnbHRwckJubi+TkZJVRoXv37sHBwaHIfcnlcsjlcq1rKA9ZeU9fm7O3U8qtz+y8fNx6nAWnGqYwMTIslz6vJKlfeZyIiKgi0joIjRo1CsnJyTh27BgCAgKwefNm3Lt3D9OmTcPcuXO12pcQAh9//DE2b96M6OhouLu7qyz39fWFkZER9u/fj9DQUADAxYsXcePGjUp5zaKr/x8QPtt0Rs+VlA9zeakHHImIiMqF1p9UBw4cwB9//IHmzZvDwMAArq6u6NixIywtLTFjxgyEhIRovK9hw4ZhzZo1+OOPP1C9enXlvB+FQgFTU1MoFAoMHjwYY8aMgbW1NSwtLfHxxx/Dz8+vUp4x9nqDp6NYHnYWMC3H0ZlR6+KxoFcTeNpZlEufwNMQ5F7TvNz6IyIiKg2tg1BGRgbs7OwAPD2t/v79+6hbty4aNWqEkydParWvJUuWAAACAgJU2iMiIjBw4EAAwPz582FgYIDQ0FCVCypWRtbmxuj9mote+va0s0DD2ooXr0hERCQhWgehevXq4eLFi3Bzc0Pjxo3x448/ws3NDUuXLkWtWrW02pcQ4oXrmJiYYNGiRVi0aJG2pRIRERGVSOsgNHLkSCQmJgIAJk2ahE6dOmH16tUwNjZGZGRkWddHREREpDMaB6GEhAS4u7ujX79+yjZfX19cv34dFy5cgIuLC2rWrKmTIomIiIh0QeMg5OHhAVdXVwQGBiIoKAgBAQFwcnKCmZkZmjVrpssaiaoEXj5B2nj8iSomjYPQgQMHEB0djejoaPz222/Izc3FK6+8gqCgIAQGBiIwMJB3hCcqAS+fIG08/kQVk8bv1ICAAOXZXdnZ2Th8+LAyGK1cuRJ5eXnw8vLCv//+q6taiSo1Xj5B2nj8iSqmUkV2ExMTBAUFoU2bNggMDMTOnTvx448/4sKFC2VdH1GVwcsnSBuPP1HFpFUQys3NxdGjRxEVFYXo6GgcO3YMzs7OaNeuHX744Qed3ZCViIiISBc0DkJBQUE4duwY3N3d4e/vj6FDh2LNmjVaXzuIiIiIqKLQOAgdOnQItWrVUp4x5u/vDxsbG13WRkRERKRTBpqumJycjJ9++glmZmaYNWsWHB0d0ahRIwwfPhwbNmzA/fv3dVknERERUZnTeETI3NwcnTp1QqdOnQAAaWlpiImJQVRUFL799lv07dsXderUwdmzZ3VWLBEREVFZ0nhE6Hnm5uawtraGtbU1atSogWrVquH8+fNlWRsRERGRTmk8IlRQUIATJ04gOjoaUVFRiI2NRUZGBmrXro3AwEAsWrQIgYGBuqyViIiIqExpHISsrKyQkZEBBwcHBAYGYv78+QgICICHh4cu6yMiIiLSGY2D0OzZsxEYGIi6devqsh4iIiKicqNxEBo6dKgu6yAiIiIqd6WeLE1ERERU2TEIERERkWQxCBEREZFkleru80RERKS5rLx8AMDZ2ynl1md2Xj5uPc6CUw1TmBgZlkufV5LSy6WfssQgREREpGNX/z8gfLbpjJ4rKR/m8soTLypPpURERJXU6w0cAAAedhYwLcfRmVHr4rGgVxN42lmUS5/A0xDkXtO83Pp7WQxCREREOmZtbozer7nopW9POws0rK3QS9+VASdLExERkWQxCBEREZFkMQgRERGRZDEIERERkWQxCBEREZFkMQgRERGRZDEIERERkWQxCBEREZFkMQgRERGRZDEIERERkWQxCBEREZFkMQgRERGRZDEIERERkWQxCBEREZFkMQgRERGRZDEIERERkWQxCBEREZFkMQgRERGRZDEIERERkWQxCBEREZFkMQgRERGRZDEIERERkWQxCBEREZFkMQgRERGRZDEIERERkWQxCBEREZFkMQgRERGRZDEIERERkWQxCBEREZFkMQgRERGRZDEIERERkWQxCBEREZFkMQgRERGRZDEIERERkWQxCBEREZFkMQgRERGRZDEIERERkWQxCBEREZFkMQgRERGRZFXTdwFE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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "11170695"
      },
      "source": [
        "## Summarize findings\n",
        "\n",
        "### Subtask:\n",
        "Present a summary of the ANOVA results, post-hoc test findings (if applicable), and insights from the visualizations.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ec9268a5"
      },
      "source": [
        "**Reasoning**:\n",
        "Summarize the ANOVA results, post-hoc test findings, and insights from the box plot visualization as per the instructions.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2a69c601",
        "outputId": "9cecd473-5cf9-4b64-c061-80e524ffe152"
      },
      "source": [
        "# 1. Summarize the key result of the ANOVA test\n",
        "print(\"ANOVA Summary:\")\n",
        "print(f\"F-statistic: {anova_statistic:.3f}\")\n",
        "print(f\"P-value: {anova_pvalue:.3f}\")\n",
        "alpha = 0.05\n",
        "print(f\"Significance level (alpha): {alpha}\")\n",
        "if anova_pvalue < alpha:\n",
        "    print(\"Conclusion: Since the p-value is less than alpha, we reject the null hypothesis.\")\n",
        "    print(\"There is a statistically significant difference in the mean wait times across different insurance types.\")\n",
        "else:\n",
        "    print(\"Conclusion: Since the p-value is greater than or equal to alpha, we fail to reject the null hypothesis.\")\n",
        "    print(\"There is no statistically significant difference in the mean wait times across different insurance types.\")\n",
        "\n",
        "# 2. Mention whether Tukey's HSD post-hoc test was performed and explain why or why not.\n",
        "print(\"\\nPost-hoc Test Summary:\")\n",
        "if anova_pvalue < alpha:\n",
        "    print(\"Tukey's HSD post-hoc test was performed because the ANOVA results were statistically significant.\")\n",
        "    # Assuming tukey_results variable exists from previous steps if ANOVA was significant\n",
        "    # print(\"Tukey's HSD test findings:\")\n",
        "    # print(tukey_results) # Uncomment if tukey_results is available and ANOVA was significant\n",
        "else:\n",
        "    print(\"Tukey's HSD post-hoc test was not performed because the ANOVA results were not statistically significant.\")\n",
        "\n",
        "# 3. Describe the insights gained from the box plot visualization.\n",
        "print(\"\\nBox Plot Visualization Insights:\")\n",
        "print(\"The box plot shows the distribution of wait times for each insurance type.\")\n",
        "print(\"Visually, the median wait times appear to be relatively similar across the different insurance types.\")\n",
        "print(\"The spread of the data (IQR) also seems comparable for most insurance types.\")\n",
        "print(\"There are some potential outliers in several insurance types, indicating some patients experienced unusually long or short wait times.\")\n",
        "print(\"These visual observations align with the ANOVA results, which indicated no statistically significant difference in mean wait times between the groups.\")\n",
        "\n",
        "# 4. Combine the findings into a concise summary.\n",
        "print(\"\\nOverall Summary:\")\n",
        "print(\"The ANOVA test indicated no statistically significant difference in the mean wait times across different insurance types (F = {:.3f}, p = {:.3f}).\".format(anova_statistic, anova_pvalue))\n",
        "print(\"Due to the non-significant ANOVA results, Tukey's HSD post-hoc test was not performed.\")\n",
        "print(\"The box plot visualization supports these findings, showing similar median wait times and data spread across the insurance types, with some outliers present.\")\n",
        "print(\"In conclusion, based on this analysis, insurance type does not appear to be a significant predictor of patient wait times in this dataset.\")"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ANOVA Summary:\n",
            "F-statistic: 0.532\n",
            "P-value: 0.661\n",
            "Significance level (alpha): 0.05\n",
            "Conclusion: Since the p-value is greater than or equal to alpha, we fail to reject the null hypothesis.\n",
            "There is no statistically significant difference in the mean wait times across different insurance types.\n",
            "\n",
            "Post-hoc Test Summary:\n",
            "Tukey's HSD post-hoc test was not performed because the ANOVA results were not statistically significant.\n",
            "\n",
            "Box Plot Visualization Insights:\n",
            "The box plot shows the distribution of wait times for each insurance type.\n",
            "Visually, the median wait times appear to be relatively similar across the different insurance types.\n",
            "The spread of the data (IQR) also seems comparable for most insurance types.\n",
            "There are some potential outliers in several insurance types, indicating some patients experienced unusually long or short wait times.\n",
            "These visual observations align with the ANOVA results, which indicated no statistically significant difference in mean wait times between the groups.\n",
            "\n",
            "Overall Summary:\n",
            "The ANOVA test indicated no statistically significant difference in the mean wait times across different insurance types (F = 0.532, p = 0.661).\n",
            "Due to the non-significant ANOVA results, Tukey's HSD post-hoc test was not performed.\n",
            "The box plot visualization supports these findings, showing similar median wait times and data spread across the insurance types, with some outliers present.\n",
            "In conclusion, based on this analysis, insurance type does not appear to be a significant predictor of patient wait times in this dataset.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8736e64b"
      },
      "source": [
        "## Summary:\n",
        "\n",
        "### Q&A\n",
        "\n",
        "*   **Is there a statistically significant difference in the mean wait times across different insurance types?** No, based on the ANOVA test with a significance level of 0.05 (p-value = 0.661 > 0.05), there is no statistically significant difference in the mean wait times across different insurance types.\n",
        "\n",
        "### Data Analysis Key Findings\n",
        "\n",
        "*   The ANOVA test yielded an F-statistic of 0.532 and a p-value of 0.661.\n",
        "*   Since the p-value (0.661) is greater than the significance level (0.05), the null hypothesis (that the means of all groups are equal) was not rejected.\n",
        "*   Tukey's HSD post-hoc test was not performed because the ANOVA results were not statistically significant.\n",
        "*   The box plot visualization showed that the median wait times and the spread of the data (Interquartile Range) were visually similar across the different insurance types.\n",
        "*   The box plot also indicated the presence of potential outliers in several insurance types.\n",
        "\n",
        "### Insights or Next Steps\n",
        "\n",
        "*   Insurance type does not appear to be a significant factor influencing patient wait times based on this dataset. Other factors should be investigated to understand the variation in wait times.\n"
      ]
    }
  ]
}
